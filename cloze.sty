%%
%% This is file `cloze.sty',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% cloze.dtx  (with options: `latex')
%% 
%% This is a generated file.
%% 
%% Copyright (C) 2015-2020 by Josef Friedrich <josef@friedrich.rocks>
%% ----------------------------------------------------------------------
%% This work may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License, either version 1.3c of this license
%% or (at your option) any later version. The latest version of this
%% license is in:
%% 
%%   http://www.latex-project.org/lppl.txt
%% 
%% and version 1.3c or later is part of all distributions of LaTeX
%% version 2008/05/05 or later.
%% 
\NeedsTeXFormat{LaTeX2e}[1999/12/01]
\ProvidesPackage{cloze}
    [2020/06/30 v1.6 Package to typeset cloze worksheets or cloze tests]
\input{cloze.tex}
\RequirePackage{fontspec}
\RequirePackage{luatexbase-mcb}
\RequirePackage{setspace}
\RequirePackage{xcolor}
\RequirePackage{xparse}
\RequirePackage{stackengine}
\RequirePackage{ulem}
\normalem
\RequirePackage{transparent}
\DeclareOption*{} % suppresses the error message: ! LaTeX Error: Unknown option
\ProcessOptions\relax
\RequirePackage{luakeys}
\directlua{
  cloze.parse_options('\LuakeysPackageOptions', true)
}
\let\clozesetoption=\undefined
\newcommand{\clozesetoption}[2]{%
  \directlua{cloze.set_option('#1', '#2')}%
}
\def\ClozeSetLocalOptions#1{%
  \directlua{
    cloze.parse_options('#1', false)
  }%
}
\ClozeSetToGlobal
\newcommand{\clozeset}[1]{%
  \directlua{
    cloze.parse_options('#1', true)
  }%
}
\let\clozeshow=\undefined
\newcommand{\clozeshow}{%
  \clozeset{show}
}
\let\clozehide=\undefined
\newcommand{\clozehide}{%
  \clozeset{hide}
}
\let\clozePLAIN=\cloze
\let\cloze=\undefined
\newcommand{\cloze}[2][]{%
  \ClozeSetLocalOptions{#1}%
  \clozePLAIN{#2}%
}
\let\clozefixPLAIN=\clozefix
\let\clozefix=\undefined
\newcommand{\clozefix}[2][]{%
  \ClozeSetLocalOptions{#1}%
  \clozefixPLAIN{#2}%
}
\let\clozenolPLAIN=\clozenol
\let\clozenol=\undefined
\newcommand{\clozenol}[2][]{%
  \ClozeSetLocalOptions{#1}%
  \clozenolPLAIN{#2}%
}
\newenvironment{clozepar}[1][]%
{%
  \par%
  \ClozeSetLocalOptions{#1}%
  \ClozeStartMarker{par}%
  \clozefont\relax%
}%
{%
  \ClozeStopMarker{par}%
  \par%
  \directlua{cloze.unregister_callback('par')}%
}
\let\clozeparplainPLAIN=\clozeparplain
\let\clozeparplain=\undefined
\newcommand{\clozeparplain}[2][]{%
  \ClozeSetLocalOptions{#1}%
  \clozeparplainPLAIN{#2}%
}
\newsavebox{\ClozeBox}%
\NewDocumentEnvironment{clozebox}{ s O{} +b}{%
  \ClozeSetLocalOptions{#2}%
  \directlua{
    cloze.fboxrule_restore = tex.dimen['fboxrule']
    print(cloze.get_value('boxrule'))
    tex.dimen['fboxrule'] = tex.sp(cloze.get_value('boxrule'))
  }%
  \noindent%
  \begin{lrbox}{\ClozeBox}%
  \directlua{
    local boxheight = cloze.get_value('boxheight')
    local boxwidth = cloze.get_value('boxwidth')
    if boxheight then
      tex.print('\\begin{minipage}[t][' .. boxheight .. '][t]{' .. boxwidth .. '}')
    else
      tex.print('\\begin{minipage}[t]{' .. boxwidth .. '}')
    end
  }%
  \setlength{\parindent}{0pt}%
  \clozenol[margin=0pt]{#3}%
  \end{minipage}%
  \end{lrbox}%
  \IfBooleanTF{#1}%
    {\usebox{\ClozeBox}}%
    {\fbox{\usebox{\ClozeBox}}}%
}{%
  \directlua{
    tex.dimen['fboxrule'] = cloze.fboxrule_restore
  }%
}
\newenvironment{clozespace}[1][]%
{%
  \ClozeSetLocalOptions{#1}%
  \begin{spacing}{\directlua{tex.print(cloze.get_value('spacing'))}}%
}{\end{spacing}}
\let\clozelinePLAIN=\clozeline
\let\clozeline=\undefined
\newcommand{\clozeline}[1][]{%
  \ClozeSetLocalOptions{#1}%
  \clozelinePLAIN%
}
\let\clozelinefilPLAIN=\clozelinefil
\let\clozelinefil=\undefined
\newcommand{\clozelinefil}[1][]{%
  \ClozeSetLocalOptions{#1}%
  \clozelinefilPLAIN%
}
\let\clozefil=\undefined
\newcommand{\clozefil}[2][]{%
  \cloze[#1]{#2}\clozelinefil[#1]%
}
\newcommand{\clozeextend}[1][1]{%
  \directlua{
    local loop = #1
    for variable = 1, loop do
      tex.print(' \string\\hspace{1em} \string\\strut')
    end
  }
}
\newcommand{\ClozeTextColor}[1]{%
  \textcolor%
    {\directlua{tex.print(cloze.get_value('textcolor_name'))}}%
    {#1}%
}
\newcommand\ClozeStrikeLine{%
  \bgroup%
  \markoverwith{%
    \ClozeTextColor{%
      \rule[0.5ex]{2pt}{1pt}%
    }%
  }%
  \ULon%
}
\newcommand{\clozestrike}[3][]{%
  \ClozeSetLocalOptions{#1}%
  \ifclozeshow%
    \stackengine%
      {\Sstackgap}% \Sstackgap or \Lstackgap or \stackgap or stacklength
      {\ClozeStrikeLine{#2}}% anchor
      {\ClozeTextColor{\clozefont{}#3}}% item
      {O}% O or U
      {c}% \stackalignment or l or c or r
      {\quietstack}% \quietstack or T or F
      {T}% \useanchorwidth or T or F
      {\stacktype}% \stacktype or S or L
  \else%
    \stackengine%
      {\Sstackgap}% \Sstackgap or \Lstackgap or \stackgap or stacklength
      {#2}% anchor
      {\texttransparent{0}{\clozefont{}#3}}% item
      {O}% O or U
      {c}% \stackalignment or l or c or r
      {\quietstack}% \quietstack or T or F
      {T}% \useanchorwidth or T or F
      {\stacktype}% \stacktype or S or L
  \fi%
}
\endinput
%%
%% End of file `cloze.sty'.
